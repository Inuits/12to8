// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ServicesMonthInfoList calculates and returns information from a given month

Calculates and returns information from a given month.
*/
func (a *Client) ServicesMonthInfoList(params *ServicesMonthInfoListParams, authInfo runtime.ClientAuthInfoWriter) (*ServicesMonthInfoListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesMonthInfoListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "services_month_info_list",
		Method:             "GET",
		PathPattern:        "/api/v1/services/month_info/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicesMonthInfoListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServicesMonthInfoListOK), nil

}

/*
ServicesMyLeaveRequestCreate defines the behaviour for a post request

Defines the behaviour for a post request.
*/
func (a *Client) ServicesMyLeaveRequestCreate(params *ServicesMyLeaveRequestCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ServicesMyLeaveRequestCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesMyLeaveRequestCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "services_my_leave_request_create",
		Method:             "POST",
		PathPattern:        "/api/v1/services/my_leave_request/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicesMyLeaveRequestCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServicesMyLeaveRequestCreateCreated), nil

}

/*
ServicesMyLeaveRequestUpdatePartialUpdate defines the behaviour for a patch request

Defines the behaviour for a patch request.
*/
func (a *Client) ServicesMyLeaveRequestUpdatePartialUpdate(params *ServicesMyLeaveRequestUpdatePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServicesMyLeaveRequestUpdatePartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesMyLeaveRequestUpdatePartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "services_my_leave_request_update_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/services/my_leave_request_update/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicesMyLeaveRequestUpdatePartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServicesMyLeaveRequestUpdatePartialUpdateOK), nil

}

/*
ServicesMyLeaveRequestUpdateUpdate defines the behaviour for a put request

Defines the behaviour for a put request.
*/
func (a *Client) ServicesMyLeaveRequestUpdateUpdate(params *ServicesMyLeaveRequestUpdateUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServicesMyLeaveRequestUpdateUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesMyLeaveRequestUpdateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "services_my_leave_request_update_update",
		Method:             "PUT",
		PathPattern:        "/api/v1/services/my_leave_request_update/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicesMyLeaveRequestUpdateUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServicesMyLeaveRequestUpdateUpdateOK), nil

}

/*
ServicesMyUserList gets the currently authenticated user

Get the currently authenticated user.
*/
func (a *Client) ServicesMyUserList(params *ServicesMyUserListParams, authInfo runtime.ClientAuthInfoWriter) (*ServicesMyUserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesMyUserListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "services_my_user_list",
		Method:             "GET",
		PathPattern:        "/api/v1/services/my_user/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicesMyUserListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServicesMyUserListOK), nil

}

/*
ServicesTimeEntryImportList gets time entries from external sources and returns them to be imported as performances

Gets time entries from external sources and returns them to be imported as performances.
*/
func (a *Client) ServicesTimeEntryImportList(params *ServicesTimeEntryImportListParams, authInfo runtime.ClientAuthInfoWriter) (*ServicesTimeEntryImportListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesTimeEntryImportListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "services_time_entry_import_list",
		Method:             "GET",
		PathPattern:        "/api/v1/services/time_entry_import/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicesTimeEntryImportListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServicesTimeEntryImportListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
