// Code generated by go-swagger; DO NOT EDIT.

package contract_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contract users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contract users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ContractUsersList APIs endpoint that allows contract users to be viewed or edited

API endpoint that allows contract users to be viewed or edited.
*/
func (a *Client) ContractUsersList(params *ContractUsersListParams, authInfo runtime.ClientAuthInfoWriter) (*ContractUsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractUsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contract_users_list",
		Method:             "GET",
		PathPattern:        "/api/v1/contract_users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractUsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractUsersListOK), nil

}

/*
ContractUsersRead APIs endpoint that allows contract users to be viewed or edited

API endpoint that allows contract users to be viewed or edited.
*/
func (a *Client) ContractUsersRead(params *ContractUsersReadParams, authInfo runtime.ClientAuthInfoWriter) (*ContractUsersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractUsersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contract_users_read",
		Method:             "GET",
		PathPattern:        "/api/v1/contract_users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractUsersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractUsersReadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
