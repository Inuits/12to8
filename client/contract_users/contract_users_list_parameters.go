// Code generated by go-swagger; DO NOT EDIT.

package contract_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContractUsersListParams creates a new ContractUsersListParams object
// with the default values initialized.
func NewContractUsersListParams() *ContractUsersListParams {
	var ()
	return &ContractUsersListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewContractUsersListParamsWithTimeout creates a new ContractUsersListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContractUsersListParamsWithTimeout(timeout time.Duration) *ContractUsersListParams {
	var ()
	return &ContractUsersListParams{

		timeout: timeout,
	}
}

// NewContractUsersListParamsWithContext creates a new ContractUsersListParams object
// with the default values initialized, and the ability to set a context for a request
func NewContractUsersListParamsWithContext(ctx context.Context) *ContractUsersListParams {
	var ()
	return &ContractUsersListParams{

		Context: ctx,
	}
}

// NewContractUsersListParamsWithHTTPClient creates a new ContractUsersListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContractUsersListParamsWithHTTPClient(client *http.Client) *ContractUsersListParams {
	var ()
	return &ContractUsersListParams{
		HTTPClient: client,
	}
}

/*ContractUsersListParams contains all the parameters to send to the API endpoint
for the contract users list operation typically these are written to a http.Request
*/
type ContractUsersListParams struct {

	/*Contract*/
	Contract *string
	/*OrderBy*/
	OrderBy *string
	/*Page*/
	Page *string
	/*PageSize*/
	PageSize *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the contract users list params
func (o *ContractUsersListParams) WithTimeout(timeout time.Duration) *ContractUsersListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contract users list params
func (o *ContractUsersListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contract users list params
func (o *ContractUsersListParams) WithContext(ctx context.Context) *ContractUsersListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contract users list params
func (o *ContractUsersListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contract users list params
func (o *ContractUsersListParams) WithHTTPClient(client *http.Client) *ContractUsersListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contract users list params
func (o *ContractUsersListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContract adds the contract to the contract users list params
func (o *ContractUsersListParams) WithContract(contract *string) *ContractUsersListParams {
	o.SetContract(contract)
	return o
}

// SetContract adds the contract to the contract users list params
func (o *ContractUsersListParams) SetContract(contract *string) {
	o.Contract = contract
}

// WithOrderBy adds the orderBy to the contract users list params
func (o *ContractUsersListParams) WithOrderBy(orderBy *string) *ContractUsersListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the contract users list params
func (o *ContractUsersListParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the contract users list params
func (o *ContractUsersListParams) WithPage(page *string) *ContractUsersListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the contract users list params
func (o *ContractUsersListParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the contract users list params
func (o *ContractUsersListParams) WithPageSize(pageSize *string) *ContractUsersListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the contract users list params
func (o *ContractUsersListParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *ContractUsersListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Contract != nil {

		// query param contract
		var qrContract string
		if o.Contract != nil {
			qrContract = *o.Contract
		}
		qContract := qrContract
		if qContract != "" {
			if err := r.SetQueryParam("contract", qContract); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
