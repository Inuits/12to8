// Code generated by go-swagger; DO NOT EDIT.

package my_performances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new my performances API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for my performances API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MyPerformancesActivityCreate APIs endpoint that allows activity performances for the currently authenticated user to be viewed or edited

API endpoint that allows activity performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesActivityCreate(params *MyPerformancesActivityCreateParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesActivityCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesActivityCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_activity_create",
		Method:             "POST",
		PathPattern:        "/api/v1/my_performances/activity/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesActivityCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesActivityCreateCreated), nil

}

/*
MyPerformancesActivityDelete APIs endpoint that allows activity performances for the currently authenticated user to be viewed or edited

API endpoint that allows activity performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesActivityDelete(params *MyPerformancesActivityDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesActivityDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesActivityDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_activity_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/my_performances/activity/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesActivityDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesActivityDeleteNoContent), nil

}

/*
MyPerformancesActivityList APIs endpoint that allows activity performances for the currently authenticated user to be viewed or edited

API endpoint that allows activity performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesActivityList(params *MyPerformancesActivityListParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesActivityListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesActivityListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_activity_list",
		Method:             "GET",
		PathPattern:        "/api/v1/my_performances/activity/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesActivityListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesActivityListOK), nil

}

/*
MyPerformancesActivityPartialUpdate APIs endpoint that allows activity performances for the currently authenticated user to be viewed or edited

API endpoint that allows activity performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesActivityPartialUpdate(params *MyPerformancesActivityPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesActivityPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesActivityPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_activity_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/my_performances/activity/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesActivityPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesActivityPartialUpdateOK), nil

}

/*
MyPerformancesActivityRead APIs endpoint that allows activity performances for the currently authenticated user to be viewed or edited

API endpoint that allows activity performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesActivityRead(params *MyPerformancesActivityReadParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesActivityReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesActivityReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_activity_read",
		Method:             "GET",
		PathPattern:        "/api/v1/my_performances/activity/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesActivityReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesActivityReadOK), nil

}

/*
MyPerformancesActivityUpdate APIs endpoint that allows activity performances for the currently authenticated user to be viewed or edited

API endpoint that allows activity performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesActivityUpdate(params *MyPerformancesActivityUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesActivityUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesActivityUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_activity_update",
		Method:             "PUT",
		PathPattern:        "/api/v1/my_performances/activity/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesActivityUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesActivityUpdateOK), nil

}

/*
MyPerformancesList APIs endpoint that allows performances for the currently authenticated user to be viewed or edited

API endpoint that allows performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesList(params *MyPerformancesListParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_list",
		Method:             "GET",
		PathPattern:        "/api/v1/my_performances/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesListOK), nil

}

/*
MyPerformancesRead APIs endpoint that allows performances for the currently authenticated user to be viewed or edited

API endpoint that allows performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesRead(params *MyPerformancesReadParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_read",
		Method:             "GET",
		PathPattern:        "/api/v1/my_performances/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesReadOK), nil

}

/*
MyPerformancesStandbyCreate APIs endpoint that allows standby performances for the currently authenticated user to be viewed or edited

API endpoint that allows standby performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesStandbyCreate(params *MyPerformancesStandbyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesStandbyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesStandbyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_standby_create",
		Method:             "POST",
		PathPattern:        "/api/v1/my_performances/standby/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesStandbyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesStandbyCreateCreated), nil

}

/*
MyPerformancesStandbyDelete APIs endpoint that allows standby performances for the currently authenticated user to be viewed or edited

API endpoint that allows standby performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesStandbyDelete(params *MyPerformancesStandbyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesStandbyDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesStandbyDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_standby_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/my_performances/standby/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesStandbyDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesStandbyDeleteNoContent), nil

}

/*
MyPerformancesStandbyList APIs endpoint that allows standby performances for the currently authenticated user to be viewed or edited

API endpoint that allows standby performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesStandbyList(params *MyPerformancesStandbyListParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesStandbyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesStandbyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_standby_list",
		Method:             "GET",
		PathPattern:        "/api/v1/my_performances/standby/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesStandbyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesStandbyListOK), nil

}

/*
MyPerformancesStandbyPartialUpdate APIs endpoint that allows standby performances for the currently authenticated user to be viewed or edited

API endpoint that allows standby performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesStandbyPartialUpdate(params *MyPerformancesStandbyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesStandbyPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesStandbyPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_standby_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/my_performances/standby/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesStandbyPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesStandbyPartialUpdateOK), nil

}

/*
MyPerformancesStandbyRead APIs endpoint that allows standby performances for the currently authenticated user to be viewed or edited

API endpoint that allows standby performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesStandbyRead(params *MyPerformancesStandbyReadParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesStandbyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesStandbyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_standby_read",
		Method:             "GET",
		PathPattern:        "/api/v1/my_performances/standby/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesStandbyReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesStandbyReadOK), nil

}

/*
MyPerformancesStandbyUpdate APIs endpoint that allows standby performances for the currently authenticated user to be viewed or edited

API endpoint that allows standby performances for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyPerformancesStandbyUpdate(params *MyPerformancesStandbyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyPerformancesStandbyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyPerformancesStandbyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_performances_standby_update",
		Method:             "PUT",
		PathPattern:        "/api/v1/my_performances/standby/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyPerformancesStandbyUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyPerformancesStandbyUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
