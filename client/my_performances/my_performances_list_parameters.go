// Code generated by go-swagger; DO NOT EDIT.

package my_performances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMyPerformancesListParams creates a new MyPerformancesListParams object
// with the default values initialized.
func NewMyPerformancesListParams() *MyPerformancesListParams {
	var ()
	return &MyPerformancesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMyPerformancesListParamsWithTimeout creates a new MyPerformancesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMyPerformancesListParamsWithTimeout(timeout time.Duration) *MyPerformancesListParams {
	var ()
	return &MyPerformancesListParams{

		timeout: timeout,
	}
}

// NewMyPerformancesListParamsWithContext creates a new MyPerformancesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewMyPerformancesListParamsWithContext(ctx context.Context) *MyPerformancesListParams {
	var ()
	return &MyPerformancesListParams{

		Context: ctx,
	}
}

// NewMyPerformancesListParamsWithHTTPClient creates a new MyPerformancesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMyPerformancesListParamsWithHTTPClient(client *http.Client) *MyPerformancesListParams {
	var ()
	return &MyPerformancesListParams{
		HTTPClient: client,
	}
}

/*MyPerformancesListParams contains all the parameters to send to the API endpoint
for the my performances list operation typically these are written to a http.Request
*/
type MyPerformancesListParams struct {

	/*Contract*/
	Contract *string
	/*Day*/
	Day *string
	/*DayGt*/
	DayGt *string
	/*DayGte*/
	DayGte *string
	/*DayLt*/
	DayLt *string
	/*DayLte*/
	DayLte *string
	/*OrderBy*/
	OrderBy *string
	/*Page*/
	Page *string
	/*PageSize*/
	PageSize *string
	/*Timesheet*/
	Timesheet *string
	/*TimesheetMonth*/
	TimesheetMonth *string
	/*TimesheetMonthGte*/
	TimesheetMonthGte *string
	/*TimesheetMonthLte*/
	TimesheetMonthLte *string
	/*TimesheetUserID*/
	TimesheetUserID *string
	/*TimesheetYear*/
	TimesheetYear *string
	/*TimesheetYearGte*/
	TimesheetYearGte *string
	/*TimesheetYearLte*/
	TimesheetYearLte *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the my performances list params
func (o *MyPerformancesListParams) WithTimeout(timeout time.Duration) *MyPerformancesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the my performances list params
func (o *MyPerformancesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the my performances list params
func (o *MyPerformancesListParams) WithContext(ctx context.Context) *MyPerformancesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the my performances list params
func (o *MyPerformancesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the my performances list params
func (o *MyPerformancesListParams) WithHTTPClient(client *http.Client) *MyPerformancesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the my performances list params
func (o *MyPerformancesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContract adds the contract to the my performances list params
func (o *MyPerformancesListParams) WithContract(contract *string) *MyPerformancesListParams {
	o.SetContract(contract)
	return o
}

// SetContract adds the contract to the my performances list params
func (o *MyPerformancesListParams) SetContract(contract *string) {
	o.Contract = contract
}

// WithDay adds the day to the my performances list params
func (o *MyPerformancesListParams) WithDay(day *string) *MyPerformancesListParams {
	o.SetDay(day)
	return o
}

// SetDay adds the day to the my performances list params
func (o *MyPerformancesListParams) SetDay(day *string) {
	o.Day = day
}

// WithDayGt adds the dayGt to the my performances list params
func (o *MyPerformancesListParams) WithDayGt(dayGt *string) *MyPerformancesListParams {
	o.SetDayGt(dayGt)
	return o
}

// SetDayGt adds the dayGt to the my performances list params
func (o *MyPerformancesListParams) SetDayGt(dayGt *string) {
	o.DayGt = dayGt
}

// WithDayGte adds the dayGte to the my performances list params
func (o *MyPerformancesListParams) WithDayGte(dayGte *string) *MyPerformancesListParams {
	o.SetDayGte(dayGte)
	return o
}

// SetDayGte adds the dayGte to the my performances list params
func (o *MyPerformancesListParams) SetDayGte(dayGte *string) {
	o.DayGte = dayGte
}

// WithDayLt adds the dayLt to the my performances list params
func (o *MyPerformancesListParams) WithDayLt(dayLt *string) *MyPerformancesListParams {
	o.SetDayLt(dayLt)
	return o
}

// SetDayLt adds the dayLt to the my performances list params
func (o *MyPerformancesListParams) SetDayLt(dayLt *string) {
	o.DayLt = dayLt
}

// WithDayLte adds the dayLte to the my performances list params
func (o *MyPerformancesListParams) WithDayLte(dayLte *string) *MyPerformancesListParams {
	o.SetDayLte(dayLte)
	return o
}

// SetDayLte adds the dayLte to the my performances list params
func (o *MyPerformancesListParams) SetDayLte(dayLte *string) {
	o.DayLte = dayLte
}

// WithOrderBy adds the orderBy to the my performances list params
func (o *MyPerformancesListParams) WithOrderBy(orderBy *string) *MyPerformancesListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the my performances list params
func (o *MyPerformancesListParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the my performances list params
func (o *MyPerformancesListParams) WithPage(page *string) *MyPerformancesListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the my performances list params
func (o *MyPerformancesListParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the my performances list params
func (o *MyPerformancesListParams) WithPageSize(pageSize *string) *MyPerformancesListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the my performances list params
func (o *MyPerformancesListParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithTimesheet adds the timesheet to the my performances list params
func (o *MyPerformancesListParams) WithTimesheet(timesheet *string) *MyPerformancesListParams {
	o.SetTimesheet(timesheet)
	return o
}

// SetTimesheet adds the timesheet to the my performances list params
func (o *MyPerformancesListParams) SetTimesheet(timesheet *string) {
	o.Timesheet = timesheet
}

// WithTimesheetMonth adds the timesheetMonth to the my performances list params
func (o *MyPerformancesListParams) WithTimesheetMonth(timesheetMonth *string) *MyPerformancesListParams {
	o.SetTimesheetMonth(timesheetMonth)
	return o
}

// SetTimesheetMonth adds the timesheetMonth to the my performances list params
func (o *MyPerformancesListParams) SetTimesheetMonth(timesheetMonth *string) {
	o.TimesheetMonth = timesheetMonth
}

// WithTimesheetMonthGte adds the timesheetMonthGte to the my performances list params
func (o *MyPerformancesListParams) WithTimesheetMonthGte(timesheetMonthGte *string) *MyPerformancesListParams {
	o.SetTimesheetMonthGte(timesheetMonthGte)
	return o
}

// SetTimesheetMonthGte adds the timesheetMonthGte to the my performances list params
func (o *MyPerformancesListParams) SetTimesheetMonthGte(timesheetMonthGte *string) {
	o.TimesheetMonthGte = timesheetMonthGte
}

// WithTimesheetMonthLte adds the timesheetMonthLte to the my performances list params
func (o *MyPerformancesListParams) WithTimesheetMonthLte(timesheetMonthLte *string) *MyPerformancesListParams {
	o.SetTimesheetMonthLte(timesheetMonthLte)
	return o
}

// SetTimesheetMonthLte adds the timesheetMonthLte to the my performances list params
func (o *MyPerformancesListParams) SetTimesheetMonthLte(timesheetMonthLte *string) {
	o.TimesheetMonthLte = timesheetMonthLte
}

// WithTimesheetUserID adds the timesheetUserID to the my performances list params
func (o *MyPerformancesListParams) WithTimesheetUserID(timesheetUserID *string) *MyPerformancesListParams {
	o.SetTimesheetUserID(timesheetUserID)
	return o
}

// SetTimesheetUserID adds the timesheetUserId to the my performances list params
func (o *MyPerformancesListParams) SetTimesheetUserID(timesheetUserID *string) {
	o.TimesheetUserID = timesheetUserID
}

// WithTimesheetYear adds the timesheetYear to the my performances list params
func (o *MyPerformancesListParams) WithTimesheetYear(timesheetYear *string) *MyPerformancesListParams {
	o.SetTimesheetYear(timesheetYear)
	return o
}

// SetTimesheetYear adds the timesheetYear to the my performances list params
func (o *MyPerformancesListParams) SetTimesheetYear(timesheetYear *string) {
	o.TimesheetYear = timesheetYear
}

// WithTimesheetYearGte adds the timesheetYearGte to the my performances list params
func (o *MyPerformancesListParams) WithTimesheetYearGte(timesheetYearGte *string) *MyPerformancesListParams {
	o.SetTimesheetYearGte(timesheetYearGte)
	return o
}

// SetTimesheetYearGte adds the timesheetYearGte to the my performances list params
func (o *MyPerformancesListParams) SetTimesheetYearGte(timesheetYearGte *string) {
	o.TimesheetYearGte = timesheetYearGte
}

// WithTimesheetYearLte adds the timesheetYearLte to the my performances list params
func (o *MyPerformancesListParams) WithTimesheetYearLte(timesheetYearLte *string) *MyPerformancesListParams {
	o.SetTimesheetYearLte(timesheetYearLte)
	return o
}

// SetTimesheetYearLte adds the timesheetYearLte to the my performances list params
func (o *MyPerformancesListParams) SetTimesheetYearLte(timesheetYearLte *string) {
	o.TimesheetYearLte = timesheetYearLte
}

// WriteToRequest writes these params to a swagger request
func (o *MyPerformancesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Contract != nil {

		// query param contract
		var qrContract string
		if o.Contract != nil {
			qrContract = *o.Contract
		}
		qContract := qrContract
		if qContract != "" {
			if err := r.SetQueryParam("contract", qContract); err != nil {
				return err
			}
		}

	}

	if o.Day != nil {

		// query param day
		var qrDay string
		if o.Day != nil {
			qrDay = *o.Day
		}
		qDay := qrDay
		if qDay != "" {
			if err := r.SetQueryParam("day", qDay); err != nil {
				return err
			}
		}

	}

	if o.DayGt != nil {

		// query param day__gt
		var qrDayGt string
		if o.DayGt != nil {
			qrDayGt = *o.DayGt
		}
		qDayGt := qrDayGt
		if qDayGt != "" {
			if err := r.SetQueryParam("day__gt", qDayGt); err != nil {
				return err
			}
		}

	}

	if o.DayGte != nil {

		// query param day__gte
		var qrDayGte string
		if o.DayGte != nil {
			qrDayGte = *o.DayGte
		}
		qDayGte := qrDayGte
		if qDayGte != "" {
			if err := r.SetQueryParam("day__gte", qDayGte); err != nil {
				return err
			}
		}

	}

	if o.DayLt != nil {

		// query param day__lt
		var qrDayLt string
		if o.DayLt != nil {
			qrDayLt = *o.DayLt
		}
		qDayLt := qrDayLt
		if qDayLt != "" {
			if err := r.SetQueryParam("day__lt", qDayLt); err != nil {
				return err
			}
		}

	}

	if o.DayLte != nil {

		// query param day__lte
		var qrDayLte string
		if o.DayLte != nil {
			qrDayLte = *o.DayLte
		}
		qDayLte := qrDayLte
		if qDayLte != "" {
			if err := r.SetQueryParam("day__lte", qDayLte); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Timesheet != nil {

		// query param timesheet
		var qrTimesheet string
		if o.Timesheet != nil {
			qrTimesheet = *o.Timesheet
		}
		qTimesheet := qrTimesheet
		if qTimesheet != "" {
			if err := r.SetQueryParam("timesheet", qTimesheet); err != nil {
				return err
			}
		}

	}

	if o.TimesheetMonth != nil {

		// query param timesheet__month
		var qrTimesheetMonth string
		if o.TimesheetMonth != nil {
			qrTimesheetMonth = *o.TimesheetMonth
		}
		qTimesheetMonth := qrTimesheetMonth
		if qTimesheetMonth != "" {
			if err := r.SetQueryParam("timesheet__month", qTimesheetMonth); err != nil {
				return err
			}
		}

	}

	if o.TimesheetMonthGte != nil {

		// query param timesheet__month__gte
		var qrTimesheetMonthGte string
		if o.TimesheetMonthGte != nil {
			qrTimesheetMonthGte = *o.TimesheetMonthGte
		}
		qTimesheetMonthGte := qrTimesheetMonthGte
		if qTimesheetMonthGte != "" {
			if err := r.SetQueryParam("timesheet__month__gte", qTimesheetMonthGte); err != nil {
				return err
			}
		}

	}

	if o.TimesheetMonthLte != nil {

		// query param timesheet__month__lte
		var qrTimesheetMonthLte string
		if o.TimesheetMonthLte != nil {
			qrTimesheetMonthLte = *o.TimesheetMonthLte
		}
		qTimesheetMonthLte := qrTimesheetMonthLte
		if qTimesheetMonthLte != "" {
			if err := r.SetQueryParam("timesheet__month__lte", qTimesheetMonthLte); err != nil {
				return err
			}
		}

	}

	if o.TimesheetUserID != nil {

		// query param timesheet__user_id
		var qrTimesheetUserID string
		if o.TimesheetUserID != nil {
			qrTimesheetUserID = *o.TimesheetUserID
		}
		qTimesheetUserID := qrTimesheetUserID
		if qTimesheetUserID != "" {
			if err := r.SetQueryParam("timesheet__user_id", qTimesheetUserID); err != nil {
				return err
			}
		}

	}

	if o.TimesheetYear != nil {

		// query param timesheet__year
		var qrTimesheetYear string
		if o.TimesheetYear != nil {
			qrTimesheetYear = *o.TimesheetYear
		}
		qTimesheetYear := qrTimesheetYear
		if qTimesheetYear != "" {
			if err := r.SetQueryParam("timesheet__year", qTimesheetYear); err != nil {
				return err
			}
		}

	}

	if o.TimesheetYearGte != nil {

		// query param timesheet__year__gte
		var qrTimesheetYearGte string
		if o.TimesheetYearGte != nil {
			qrTimesheetYearGte = *o.TimesheetYearGte
		}
		qTimesheetYearGte := qrTimesheetYearGte
		if qTimesheetYearGte != "" {
			if err := r.SetQueryParam("timesheet__year__gte", qTimesheetYearGte); err != nil {
				return err
			}
		}

	}

	if o.TimesheetYearLte != nil {

		// query param timesheet__year__lte
		var qrTimesheetYearLte string
		if o.TimesheetYearLte != nil {
			qrTimesheetYearLte = *o.TimesheetYearLte
		}
		qTimesheetYearLte := qrTimesheetYearLte
		if qTimesheetYearLte != "" {
			if err := r.SetQueryParam("timesheet__year__lte", qTimesheetYearLte); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
