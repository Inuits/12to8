// Code generated by go-swagger; DO NOT EDIT.

package holidays

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewHolidaysListParams creates a new HolidaysListParams object
// with the default values initialized.
func NewHolidaysListParams() *HolidaysListParams {
	var ()
	return &HolidaysListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHolidaysListParamsWithTimeout creates a new HolidaysListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHolidaysListParamsWithTimeout(timeout time.Duration) *HolidaysListParams {
	var ()
	return &HolidaysListParams{

		timeout: timeout,
	}
}

// NewHolidaysListParamsWithContext creates a new HolidaysListParams object
// with the default values initialized, and the ability to set a context for a request
func NewHolidaysListParamsWithContext(ctx context.Context) *HolidaysListParams {
	var ()
	return &HolidaysListParams{

		Context: ctx,
	}
}

// NewHolidaysListParamsWithHTTPClient creates a new HolidaysListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHolidaysListParamsWithHTTPClient(client *http.Client) *HolidaysListParams {
	var ()
	return &HolidaysListParams{
		HTTPClient: client,
	}
}

/*HolidaysListParams contains all the parameters to send to the API endpoint
for the holidays list operation typically these are written to a http.Request
*/
type HolidaysListParams struct {

	/*Country*/
	Country *string
	/*Date*/
	Date *string
	/*DateGt*/
	DateGt *string
	/*DateGte*/
	DateGte *string
	/*DateLt*/
	DateLt *string
	/*DateLte*/
	DateLte *string
	/*Name*/
	Name *string
	/*NameContains*/
	NameContains *string
	/*NameIcontains*/
	NameIcontains *string
	/*OrderBy*/
	OrderBy *string
	/*Page*/
	Page *string
	/*PageSize*/
	PageSize *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the holidays list params
func (o *HolidaysListParams) WithTimeout(timeout time.Duration) *HolidaysListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the holidays list params
func (o *HolidaysListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the holidays list params
func (o *HolidaysListParams) WithContext(ctx context.Context) *HolidaysListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the holidays list params
func (o *HolidaysListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the holidays list params
func (o *HolidaysListParams) WithHTTPClient(client *http.Client) *HolidaysListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the holidays list params
func (o *HolidaysListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountry adds the country to the holidays list params
func (o *HolidaysListParams) WithCountry(country *string) *HolidaysListParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the holidays list params
func (o *HolidaysListParams) SetCountry(country *string) {
	o.Country = country
}

// WithDate adds the date to the holidays list params
func (o *HolidaysListParams) WithDate(date *string) *HolidaysListParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the holidays list params
func (o *HolidaysListParams) SetDate(date *string) {
	o.Date = date
}

// WithDateGt adds the dateGt to the holidays list params
func (o *HolidaysListParams) WithDateGt(dateGt *string) *HolidaysListParams {
	o.SetDateGt(dateGt)
	return o
}

// SetDateGt adds the dateGt to the holidays list params
func (o *HolidaysListParams) SetDateGt(dateGt *string) {
	o.DateGt = dateGt
}

// WithDateGte adds the dateGte to the holidays list params
func (o *HolidaysListParams) WithDateGte(dateGte *string) *HolidaysListParams {
	o.SetDateGte(dateGte)
	return o
}

// SetDateGte adds the dateGte to the holidays list params
func (o *HolidaysListParams) SetDateGte(dateGte *string) {
	o.DateGte = dateGte
}

// WithDateLt adds the dateLt to the holidays list params
func (o *HolidaysListParams) WithDateLt(dateLt *string) *HolidaysListParams {
	o.SetDateLt(dateLt)
	return o
}

// SetDateLt adds the dateLt to the holidays list params
func (o *HolidaysListParams) SetDateLt(dateLt *string) {
	o.DateLt = dateLt
}

// WithDateLte adds the dateLte to the holidays list params
func (o *HolidaysListParams) WithDateLte(dateLte *string) *HolidaysListParams {
	o.SetDateLte(dateLte)
	return o
}

// SetDateLte adds the dateLte to the holidays list params
func (o *HolidaysListParams) SetDateLte(dateLte *string) {
	o.DateLte = dateLte
}

// WithName adds the name to the holidays list params
func (o *HolidaysListParams) WithName(name *string) *HolidaysListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the holidays list params
func (o *HolidaysListParams) SetName(name *string) {
	o.Name = name
}

// WithNameContains adds the nameContains to the holidays list params
func (o *HolidaysListParams) WithNameContains(nameContains *string) *HolidaysListParams {
	o.SetNameContains(nameContains)
	return o
}

// SetNameContains adds the nameContains to the holidays list params
func (o *HolidaysListParams) SetNameContains(nameContains *string) {
	o.NameContains = nameContains
}

// WithNameIcontains adds the nameIcontains to the holidays list params
func (o *HolidaysListParams) WithNameIcontains(nameIcontains *string) *HolidaysListParams {
	o.SetNameIcontains(nameIcontains)
	return o
}

// SetNameIcontains adds the nameIcontains to the holidays list params
func (o *HolidaysListParams) SetNameIcontains(nameIcontains *string) {
	o.NameIcontains = nameIcontains
}

// WithOrderBy adds the orderBy to the holidays list params
func (o *HolidaysListParams) WithOrderBy(orderBy *string) *HolidaysListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the holidays list params
func (o *HolidaysListParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the holidays list params
func (o *HolidaysListParams) WithPage(page *string) *HolidaysListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the holidays list params
func (o *HolidaysListParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the holidays list params
func (o *HolidaysListParams) WithPageSize(pageSize *string) *HolidaysListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the holidays list params
func (o *HolidaysListParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *HolidaysListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Date != nil {

		// query param date
		var qrDate string
		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate
		if qDate != "" {
			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}

	}

	if o.DateGt != nil {

		// query param date__gt
		var qrDateGt string
		if o.DateGt != nil {
			qrDateGt = *o.DateGt
		}
		qDateGt := qrDateGt
		if qDateGt != "" {
			if err := r.SetQueryParam("date__gt", qDateGt); err != nil {
				return err
			}
		}

	}

	if o.DateGte != nil {

		// query param date__gte
		var qrDateGte string
		if o.DateGte != nil {
			qrDateGte = *o.DateGte
		}
		qDateGte := qrDateGte
		if qDateGte != "" {
			if err := r.SetQueryParam("date__gte", qDateGte); err != nil {
				return err
			}
		}

	}

	if o.DateLt != nil {

		// query param date__lt
		var qrDateLt string
		if o.DateLt != nil {
			qrDateLt = *o.DateLt
		}
		qDateLt := qrDateLt
		if qDateLt != "" {
			if err := r.SetQueryParam("date__lt", qDateLt); err != nil {
				return err
			}
		}

	}

	if o.DateLte != nil {

		// query param date__lte
		var qrDateLte string
		if o.DateLte != nil {
			qrDateLte = *o.DateLte
		}
		qDateLte := qrDateLte
		if qDateLte != "" {
			if err := r.SetQueryParam("date__lte", qDateLte); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameContains != nil {

		// query param name__contains
		var qrNameContains string
		if o.NameContains != nil {
			qrNameContains = *o.NameContains
		}
		qNameContains := qrNameContains
		if qNameContains != "" {
			if err := r.SetQueryParam("name__contains", qNameContains); err != nil {
				return err
			}
		}

	}

	if o.NameIcontains != nil {

		// query param name__icontains
		var qrNameIcontains string
		if o.NameIcontains != nil {
			qrNameIcontains = *o.NameIcontains
		}
		qNameIcontains := qrNameIcontains
		if qNameIcontains != "" {
			if err := r.SetQueryParam("name__icontains", qNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
