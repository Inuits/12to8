// Code generated by go-swagger; DO NOT EDIT.

package my_contracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new my contracts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for my contracts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MyContractsCreate APIs endpoint that allows contracts for the currently authenticated user to be viewed or edited

API endpoint that allows contracts for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyContractsCreate(params *MyContractsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*MyContractsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyContractsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_contracts_create",
		Method:             "POST",
		PathPattern:        "/api/v1/my_contracts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyContractsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyContractsCreateCreated), nil

}

/*
MyContractsDelete APIs endpoint that allows contracts for the currently authenticated user to be viewed or edited

API endpoint that allows contracts for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyContractsDelete(params *MyContractsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*MyContractsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyContractsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_contracts_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/my_contracts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyContractsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyContractsDeleteNoContent), nil

}

/*
MyContractsList APIs endpoint that allows contracts for the currently authenticated user to be viewed or edited

API endpoint that allows contracts for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyContractsList(params *MyContractsListParams, authInfo runtime.ClientAuthInfoWriter) (*MyContractsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyContractsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_contracts_list",
		Method:             "GET",
		PathPattern:        "/api/v1/my_contracts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyContractsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyContractsListOK), nil

}

/*
MyContractsPartialUpdate APIs endpoint that allows contracts for the currently authenticated user to be viewed or edited

API endpoint that allows contracts for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyContractsPartialUpdate(params *MyContractsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyContractsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyContractsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_contracts_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/my_contracts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyContractsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyContractsPartialUpdateOK), nil

}

/*
MyContractsRead APIs endpoint that allows contracts for the currently authenticated user to be viewed or edited

API endpoint that allows contracts for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyContractsRead(params *MyContractsReadParams, authInfo runtime.ClientAuthInfoWriter) (*MyContractsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyContractsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_contracts_read",
		Method:             "GET",
		PathPattern:        "/api/v1/my_contracts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyContractsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyContractsReadOK), nil

}

/*
MyContractsUpdate APIs endpoint that allows contracts for the currently authenticated user to be viewed or edited

API endpoint that allows contracts for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyContractsUpdate(params *MyContractsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyContractsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyContractsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_contracts_update",
		Method:             "PUT",
		PathPattern:        "/api/v1/my_contracts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyContractsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyContractsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
