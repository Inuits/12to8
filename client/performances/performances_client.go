// Code generated by go-swagger; DO NOT EDIT.

package performances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new performances API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for performances API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PerformancesActivityList APIs endpoint that allows activity performances to be viewed or edited

API endpoint that allows activity performances to be viewed or edited.
*/
func (a *Client) PerformancesActivityList(params *PerformancesActivityListParams, authInfo runtime.ClientAuthInfoWriter) (*PerformancesActivityListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesActivityListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "performances_activity_list",
		Method:             "GET",
		PathPattern:        "/api/v1/performances/activity/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesActivityListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformancesActivityListOK), nil

}

/*
PerformancesActivityRead APIs endpoint that allows activity performances to be viewed or edited

API endpoint that allows activity performances to be viewed or edited.
*/
func (a *Client) PerformancesActivityRead(params *PerformancesActivityReadParams, authInfo runtime.ClientAuthInfoWriter) (*PerformancesActivityReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesActivityReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "performances_activity_read",
		Method:             "GET",
		PathPattern:        "/api/v1/performances/activity/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesActivityReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformancesActivityReadOK), nil

}

/*
PerformancesList APIs endpoint that allows performances to be viewed or edited

API endpoint that allows performances to be viewed or edited.
*/
func (a *Client) PerformancesList(params *PerformancesListParams, authInfo runtime.ClientAuthInfoWriter) (*PerformancesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "performances_list",
		Method:             "GET",
		PathPattern:        "/api/v1/performances/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformancesListOK), nil

}

/*
PerformancesRead APIs endpoint that allows performances to be viewed or edited

API endpoint that allows performances to be viewed or edited.
*/
func (a *Client) PerformancesRead(params *PerformancesReadParams, authInfo runtime.ClientAuthInfoWriter) (*PerformancesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "performances_read",
		Method:             "GET",
		PathPattern:        "/api/v1/performances/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformancesReadOK), nil

}

/*
PerformancesStandbyList APIs endpoint that allows standby performances to be viewed or edited

API endpoint that allows standby performances to be viewed or edited.
*/
func (a *Client) PerformancesStandbyList(params *PerformancesStandbyListParams, authInfo runtime.ClientAuthInfoWriter) (*PerformancesStandbyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesStandbyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "performances_standby_list",
		Method:             "GET",
		PathPattern:        "/api/v1/performances/standby/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesStandbyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformancesStandbyListOK), nil

}

/*
PerformancesStandbyRead APIs endpoint that allows standby performances to be viewed or edited

API endpoint that allows standby performances to be viewed or edited.
*/
func (a *Client) PerformancesStandbyRead(params *PerformancesStandbyReadParams, authInfo runtime.ClientAuthInfoWriter) (*PerformancesStandbyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesStandbyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "performances_standby_read",
		Method:             "GET",
		PathPattern:        "/api/v1/performances/standby/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesStandbyReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformancesStandbyReadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
