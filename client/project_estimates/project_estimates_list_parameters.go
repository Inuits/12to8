// Code generated by go-swagger; DO NOT EDIT.

package project_estimates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProjectEstimatesListParams creates a new ProjectEstimatesListParams object
// with the default values initialized.
func NewProjectEstimatesListParams() *ProjectEstimatesListParams {
	var ()
	return &ProjectEstimatesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectEstimatesListParamsWithTimeout creates a new ProjectEstimatesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectEstimatesListParamsWithTimeout(timeout time.Duration) *ProjectEstimatesListParams {
	var ()
	return &ProjectEstimatesListParams{

		timeout: timeout,
	}
}

// NewProjectEstimatesListParamsWithContext creates a new ProjectEstimatesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectEstimatesListParamsWithContext(ctx context.Context) *ProjectEstimatesListParams {
	var ()
	return &ProjectEstimatesListParams{

		Context: ctx,
	}
}

// NewProjectEstimatesListParamsWithHTTPClient creates a new ProjectEstimatesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectEstimatesListParamsWithHTTPClient(client *http.Client) *ProjectEstimatesListParams {
	var ()
	return &ProjectEstimatesListParams{
		HTTPClient: client,
	}
}

/*ProjectEstimatesListParams contains all the parameters to send to the API endpoint
for the project estimates list operation typically these are written to a http.Request
*/
type ProjectEstimatesListParams struct {

	/*HoursEstimated*/
	HoursEstimated *string
	/*HoursEstimatedGt*/
	HoursEstimatedGt *string
	/*HoursEstimatedGte*/
	HoursEstimatedGte *string
	/*HoursEstimatedLt*/
	HoursEstimatedLt *string
	/*HoursEstimatedLte*/
	HoursEstimatedLte *string
	/*OrderBy*/
	OrderBy *string
	/*Page*/
	Page *string
	/*PageSize*/
	PageSize *string
	/*ProjectDescriptionContains*/
	ProjectDescriptionContains *string
	/*ProjectDescriptionIcontains*/
	ProjectDescriptionIcontains *string
	/*ProjectLabel*/
	ProjectLabel *string
	/*ProjectLabelContains*/
	ProjectLabelContains *string
	/*ProjectLabelIcontains*/
	ProjectLabelIcontains *string
	/*RoleLabel*/
	RoleLabel *string
	/*RoleLabelContains*/
	RoleLabelContains *string
	/*RoleLabelIcontains*/
	RoleLabelIcontains *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the project estimates list params
func (o *ProjectEstimatesListParams) WithTimeout(timeout time.Duration) *ProjectEstimatesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project estimates list params
func (o *ProjectEstimatesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project estimates list params
func (o *ProjectEstimatesListParams) WithContext(ctx context.Context) *ProjectEstimatesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project estimates list params
func (o *ProjectEstimatesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project estimates list params
func (o *ProjectEstimatesListParams) WithHTTPClient(client *http.Client) *ProjectEstimatesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project estimates list params
func (o *ProjectEstimatesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHoursEstimated adds the hoursEstimated to the project estimates list params
func (o *ProjectEstimatesListParams) WithHoursEstimated(hoursEstimated *string) *ProjectEstimatesListParams {
	o.SetHoursEstimated(hoursEstimated)
	return o
}

// SetHoursEstimated adds the hoursEstimated to the project estimates list params
func (o *ProjectEstimatesListParams) SetHoursEstimated(hoursEstimated *string) {
	o.HoursEstimated = hoursEstimated
}

// WithHoursEstimatedGt adds the hoursEstimatedGt to the project estimates list params
func (o *ProjectEstimatesListParams) WithHoursEstimatedGt(hoursEstimatedGt *string) *ProjectEstimatesListParams {
	o.SetHoursEstimatedGt(hoursEstimatedGt)
	return o
}

// SetHoursEstimatedGt adds the hoursEstimatedGt to the project estimates list params
func (o *ProjectEstimatesListParams) SetHoursEstimatedGt(hoursEstimatedGt *string) {
	o.HoursEstimatedGt = hoursEstimatedGt
}

// WithHoursEstimatedGte adds the hoursEstimatedGte to the project estimates list params
func (o *ProjectEstimatesListParams) WithHoursEstimatedGte(hoursEstimatedGte *string) *ProjectEstimatesListParams {
	o.SetHoursEstimatedGte(hoursEstimatedGte)
	return o
}

// SetHoursEstimatedGte adds the hoursEstimatedGte to the project estimates list params
func (o *ProjectEstimatesListParams) SetHoursEstimatedGte(hoursEstimatedGte *string) {
	o.HoursEstimatedGte = hoursEstimatedGte
}

// WithHoursEstimatedLt adds the hoursEstimatedLt to the project estimates list params
func (o *ProjectEstimatesListParams) WithHoursEstimatedLt(hoursEstimatedLt *string) *ProjectEstimatesListParams {
	o.SetHoursEstimatedLt(hoursEstimatedLt)
	return o
}

// SetHoursEstimatedLt adds the hoursEstimatedLt to the project estimates list params
func (o *ProjectEstimatesListParams) SetHoursEstimatedLt(hoursEstimatedLt *string) {
	o.HoursEstimatedLt = hoursEstimatedLt
}

// WithHoursEstimatedLte adds the hoursEstimatedLte to the project estimates list params
func (o *ProjectEstimatesListParams) WithHoursEstimatedLte(hoursEstimatedLte *string) *ProjectEstimatesListParams {
	o.SetHoursEstimatedLte(hoursEstimatedLte)
	return o
}

// SetHoursEstimatedLte adds the hoursEstimatedLte to the project estimates list params
func (o *ProjectEstimatesListParams) SetHoursEstimatedLte(hoursEstimatedLte *string) {
	o.HoursEstimatedLte = hoursEstimatedLte
}

// WithOrderBy adds the orderBy to the project estimates list params
func (o *ProjectEstimatesListParams) WithOrderBy(orderBy *string) *ProjectEstimatesListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the project estimates list params
func (o *ProjectEstimatesListParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the project estimates list params
func (o *ProjectEstimatesListParams) WithPage(page *string) *ProjectEstimatesListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the project estimates list params
func (o *ProjectEstimatesListParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the project estimates list params
func (o *ProjectEstimatesListParams) WithPageSize(pageSize *string) *ProjectEstimatesListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the project estimates list params
func (o *ProjectEstimatesListParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithProjectDescriptionContains adds the projectDescriptionContains to the project estimates list params
func (o *ProjectEstimatesListParams) WithProjectDescriptionContains(projectDescriptionContains *string) *ProjectEstimatesListParams {
	o.SetProjectDescriptionContains(projectDescriptionContains)
	return o
}

// SetProjectDescriptionContains adds the projectDescriptionContains to the project estimates list params
func (o *ProjectEstimatesListParams) SetProjectDescriptionContains(projectDescriptionContains *string) {
	o.ProjectDescriptionContains = projectDescriptionContains
}

// WithProjectDescriptionIcontains adds the projectDescriptionIcontains to the project estimates list params
func (o *ProjectEstimatesListParams) WithProjectDescriptionIcontains(projectDescriptionIcontains *string) *ProjectEstimatesListParams {
	o.SetProjectDescriptionIcontains(projectDescriptionIcontains)
	return o
}

// SetProjectDescriptionIcontains adds the projectDescriptionIcontains to the project estimates list params
func (o *ProjectEstimatesListParams) SetProjectDescriptionIcontains(projectDescriptionIcontains *string) {
	o.ProjectDescriptionIcontains = projectDescriptionIcontains
}

// WithProjectLabel adds the projectLabel to the project estimates list params
func (o *ProjectEstimatesListParams) WithProjectLabel(projectLabel *string) *ProjectEstimatesListParams {
	o.SetProjectLabel(projectLabel)
	return o
}

// SetProjectLabel adds the projectLabel to the project estimates list params
func (o *ProjectEstimatesListParams) SetProjectLabel(projectLabel *string) {
	o.ProjectLabel = projectLabel
}

// WithProjectLabelContains adds the projectLabelContains to the project estimates list params
func (o *ProjectEstimatesListParams) WithProjectLabelContains(projectLabelContains *string) *ProjectEstimatesListParams {
	o.SetProjectLabelContains(projectLabelContains)
	return o
}

// SetProjectLabelContains adds the projectLabelContains to the project estimates list params
func (o *ProjectEstimatesListParams) SetProjectLabelContains(projectLabelContains *string) {
	o.ProjectLabelContains = projectLabelContains
}

// WithProjectLabelIcontains adds the projectLabelIcontains to the project estimates list params
func (o *ProjectEstimatesListParams) WithProjectLabelIcontains(projectLabelIcontains *string) *ProjectEstimatesListParams {
	o.SetProjectLabelIcontains(projectLabelIcontains)
	return o
}

// SetProjectLabelIcontains adds the projectLabelIcontains to the project estimates list params
func (o *ProjectEstimatesListParams) SetProjectLabelIcontains(projectLabelIcontains *string) {
	o.ProjectLabelIcontains = projectLabelIcontains
}

// WithRoleLabel adds the roleLabel to the project estimates list params
func (o *ProjectEstimatesListParams) WithRoleLabel(roleLabel *string) *ProjectEstimatesListParams {
	o.SetRoleLabel(roleLabel)
	return o
}

// SetRoleLabel adds the roleLabel to the project estimates list params
func (o *ProjectEstimatesListParams) SetRoleLabel(roleLabel *string) {
	o.RoleLabel = roleLabel
}

// WithRoleLabelContains adds the roleLabelContains to the project estimates list params
func (o *ProjectEstimatesListParams) WithRoleLabelContains(roleLabelContains *string) *ProjectEstimatesListParams {
	o.SetRoleLabelContains(roleLabelContains)
	return o
}

// SetRoleLabelContains adds the roleLabelContains to the project estimates list params
func (o *ProjectEstimatesListParams) SetRoleLabelContains(roleLabelContains *string) {
	o.RoleLabelContains = roleLabelContains
}

// WithRoleLabelIcontains adds the roleLabelIcontains to the project estimates list params
func (o *ProjectEstimatesListParams) WithRoleLabelIcontains(roleLabelIcontains *string) *ProjectEstimatesListParams {
	o.SetRoleLabelIcontains(roleLabelIcontains)
	return o
}

// SetRoleLabelIcontains adds the roleLabelIcontains to the project estimates list params
func (o *ProjectEstimatesListParams) SetRoleLabelIcontains(roleLabelIcontains *string) {
	o.RoleLabelIcontains = roleLabelIcontains
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectEstimatesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HoursEstimated != nil {

		// query param hours_estimated
		var qrHoursEstimated string
		if o.HoursEstimated != nil {
			qrHoursEstimated = *o.HoursEstimated
		}
		qHoursEstimated := qrHoursEstimated
		if qHoursEstimated != "" {
			if err := r.SetQueryParam("hours_estimated", qHoursEstimated); err != nil {
				return err
			}
		}

	}

	if o.HoursEstimatedGt != nil {

		// query param hours_estimated__gt
		var qrHoursEstimatedGt string
		if o.HoursEstimatedGt != nil {
			qrHoursEstimatedGt = *o.HoursEstimatedGt
		}
		qHoursEstimatedGt := qrHoursEstimatedGt
		if qHoursEstimatedGt != "" {
			if err := r.SetQueryParam("hours_estimated__gt", qHoursEstimatedGt); err != nil {
				return err
			}
		}

	}

	if o.HoursEstimatedGte != nil {

		// query param hours_estimated__gte
		var qrHoursEstimatedGte string
		if o.HoursEstimatedGte != nil {
			qrHoursEstimatedGte = *o.HoursEstimatedGte
		}
		qHoursEstimatedGte := qrHoursEstimatedGte
		if qHoursEstimatedGte != "" {
			if err := r.SetQueryParam("hours_estimated__gte", qHoursEstimatedGte); err != nil {
				return err
			}
		}

	}

	if o.HoursEstimatedLt != nil {

		// query param hours_estimated__lt
		var qrHoursEstimatedLt string
		if o.HoursEstimatedLt != nil {
			qrHoursEstimatedLt = *o.HoursEstimatedLt
		}
		qHoursEstimatedLt := qrHoursEstimatedLt
		if qHoursEstimatedLt != "" {
			if err := r.SetQueryParam("hours_estimated__lt", qHoursEstimatedLt); err != nil {
				return err
			}
		}

	}

	if o.HoursEstimatedLte != nil {

		// query param hours_estimated__lte
		var qrHoursEstimatedLte string
		if o.HoursEstimatedLte != nil {
			qrHoursEstimatedLte = *o.HoursEstimatedLte
		}
		qHoursEstimatedLte := qrHoursEstimatedLte
		if qHoursEstimatedLte != "" {
			if err := r.SetQueryParam("hours_estimated__lte", qHoursEstimatedLte); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ProjectDescriptionContains != nil {

		// query param project__description__contains
		var qrProjectDescriptionContains string
		if o.ProjectDescriptionContains != nil {
			qrProjectDescriptionContains = *o.ProjectDescriptionContains
		}
		qProjectDescriptionContains := qrProjectDescriptionContains
		if qProjectDescriptionContains != "" {
			if err := r.SetQueryParam("project__description__contains", qProjectDescriptionContains); err != nil {
				return err
			}
		}

	}

	if o.ProjectDescriptionIcontains != nil {

		// query param project__description__icontains
		var qrProjectDescriptionIcontains string
		if o.ProjectDescriptionIcontains != nil {
			qrProjectDescriptionIcontains = *o.ProjectDescriptionIcontains
		}
		qProjectDescriptionIcontains := qrProjectDescriptionIcontains
		if qProjectDescriptionIcontains != "" {
			if err := r.SetQueryParam("project__description__icontains", qProjectDescriptionIcontains); err != nil {
				return err
			}
		}

	}

	if o.ProjectLabel != nil {

		// query param project__label
		var qrProjectLabel string
		if o.ProjectLabel != nil {
			qrProjectLabel = *o.ProjectLabel
		}
		qProjectLabel := qrProjectLabel
		if qProjectLabel != "" {
			if err := r.SetQueryParam("project__label", qProjectLabel); err != nil {
				return err
			}
		}

	}

	if o.ProjectLabelContains != nil {

		// query param project__label__contains
		var qrProjectLabelContains string
		if o.ProjectLabelContains != nil {
			qrProjectLabelContains = *o.ProjectLabelContains
		}
		qProjectLabelContains := qrProjectLabelContains
		if qProjectLabelContains != "" {
			if err := r.SetQueryParam("project__label__contains", qProjectLabelContains); err != nil {
				return err
			}
		}

	}

	if o.ProjectLabelIcontains != nil {

		// query param project__label__icontains
		var qrProjectLabelIcontains string
		if o.ProjectLabelIcontains != nil {
			qrProjectLabelIcontains = *o.ProjectLabelIcontains
		}
		qProjectLabelIcontains := qrProjectLabelIcontains
		if qProjectLabelIcontains != "" {
			if err := r.SetQueryParam("project__label__icontains", qProjectLabelIcontains); err != nil {
				return err
			}
		}

	}

	if o.RoleLabel != nil {

		// query param role__label
		var qrRoleLabel string
		if o.RoleLabel != nil {
			qrRoleLabel = *o.RoleLabel
		}
		qRoleLabel := qrRoleLabel
		if qRoleLabel != "" {
			if err := r.SetQueryParam("role__label", qRoleLabel); err != nil {
				return err
			}
		}

	}

	if o.RoleLabelContains != nil {

		// query param role__label__contains
		var qrRoleLabelContains string
		if o.RoleLabelContains != nil {
			qrRoleLabelContains = *o.RoleLabelContains
		}
		qRoleLabelContains := qrRoleLabelContains
		if qRoleLabelContains != "" {
			if err := r.SetQueryParam("role__label__contains", qRoleLabelContains); err != nil {
				return err
			}
		}

	}

	if o.RoleLabelIcontains != nil {

		// query param role__label__icontains
		var qrRoleLabelIcontains string
		if o.RoleLabelIcontains != nil {
			qrRoleLabelIcontains = *o.RoleLabelIcontains
		}
		qRoleLabelIcontains := qrRoleLabelIcontains
		if qRoleLabelIcontains != "" {
			if err := r.SetQueryParam("role__label__icontains", qRoleLabelIcontains); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
