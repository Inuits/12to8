// Code generated by go-swagger; DO NOT EDIT.

package leaves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLeavesListParams creates a new LeavesListParams object
// with the default values initialized.
func NewLeavesListParams() *LeavesListParams {
	var ()
	return &LeavesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLeavesListParamsWithTimeout creates a new LeavesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLeavesListParamsWithTimeout(timeout time.Duration) *LeavesListParams {
	var ()
	return &LeavesListParams{

		timeout: timeout,
	}
}

// NewLeavesListParamsWithContext creates a new LeavesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewLeavesListParamsWithContext(ctx context.Context) *LeavesListParams {
	var ()
	return &LeavesListParams{

		Context: ctx,
	}
}

// NewLeavesListParamsWithHTTPClient creates a new LeavesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLeavesListParamsWithHTTPClient(client *http.Client) *LeavesListParams {
	var ()
	return &LeavesListParams{
		HTTPClient: client,
	}
}

/*LeavesListParams contains all the parameters to send to the API endpoint
for the leaves list operation typically these are written to a http.Request
*/
type LeavesListParams struct {

	/*Description*/
	Description *string
	/*DescriptionContains*/
	DescriptionContains *string
	/*DescriptionIcontains*/
	DescriptionIcontains *string
	/*LeavedateGte*/
	LeavedateGte *string
	/*LeavedateRange*/
	LeavedateRange *string
	/*LeavedateTimesheet*/
	LeavedateTimesheet *string
	/*OrderBy*/
	OrderBy *string
	/*Page*/
	Page *string
	/*PageSize*/
	PageSize *string
	/*Status*/
	Status *string
	/*UserID*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the leaves list params
func (o *LeavesListParams) WithTimeout(timeout time.Duration) *LeavesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the leaves list params
func (o *LeavesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the leaves list params
func (o *LeavesListParams) WithContext(ctx context.Context) *LeavesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the leaves list params
func (o *LeavesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the leaves list params
func (o *LeavesListParams) WithHTTPClient(client *http.Client) *LeavesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the leaves list params
func (o *LeavesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the leaves list params
func (o *LeavesListParams) WithDescription(description *string) *LeavesListParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the leaves list params
func (o *LeavesListParams) SetDescription(description *string) {
	o.Description = description
}

// WithDescriptionContains adds the descriptionContains to the leaves list params
func (o *LeavesListParams) WithDescriptionContains(descriptionContains *string) *LeavesListParams {
	o.SetDescriptionContains(descriptionContains)
	return o
}

// SetDescriptionContains adds the descriptionContains to the leaves list params
func (o *LeavesListParams) SetDescriptionContains(descriptionContains *string) {
	o.DescriptionContains = descriptionContains
}

// WithDescriptionIcontains adds the descriptionIcontains to the leaves list params
func (o *LeavesListParams) WithDescriptionIcontains(descriptionIcontains *string) *LeavesListParams {
	o.SetDescriptionIcontains(descriptionIcontains)
	return o
}

// SetDescriptionIcontains adds the descriptionIcontains to the leaves list params
func (o *LeavesListParams) SetDescriptionIcontains(descriptionIcontains *string) {
	o.DescriptionIcontains = descriptionIcontains
}

// WithLeavedateGte adds the leavedateGte to the leaves list params
func (o *LeavesListParams) WithLeavedateGte(leavedateGte *string) *LeavesListParams {
	o.SetLeavedateGte(leavedateGte)
	return o
}

// SetLeavedateGte adds the leavedateGte to the leaves list params
func (o *LeavesListParams) SetLeavedateGte(leavedateGte *string) {
	o.LeavedateGte = leavedateGte
}

// WithLeavedateRange adds the leavedateRange to the leaves list params
func (o *LeavesListParams) WithLeavedateRange(leavedateRange *string) *LeavesListParams {
	o.SetLeavedateRange(leavedateRange)
	return o
}

// SetLeavedateRange adds the leavedateRange to the leaves list params
func (o *LeavesListParams) SetLeavedateRange(leavedateRange *string) {
	o.LeavedateRange = leavedateRange
}

// WithLeavedateTimesheet adds the leavedateTimesheet to the leaves list params
func (o *LeavesListParams) WithLeavedateTimesheet(leavedateTimesheet *string) *LeavesListParams {
	o.SetLeavedateTimesheet(leavedateTimesheet)
	return o
}

// SetLeavedateTimesheet adds the leavedateTimesheet to the leaves list params
func (o *LeavesListParams) SetLeavedateTimesheet(leavedateTimesheet *string) {
	o.LeavedateTimesheet = leavedateTimesheet
}

// WithOrderBy adds the orderBy to the leaves list params
func (o *LeavesListParams) WithOrderBy(orderBy *string) *LeavesListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the leaves list params
func (o *LeavesListParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the leaves list params
func (o *LeavesListParams) WithPage(page *string) *LeavesListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the leaves list params
func (o *LeavesListParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the leaves list params
func (o *LeavesListParams) WithPageSize(pageSize *string) *LeavesListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the leaves list params
func (o *LeavesListParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithStatus adds the status to the leaves list params
func (o *LeavesListParams) WithStatus(status *string) *LeavesListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the leaves list params
func (o *LeavesListParams) SetStatus(status *string) {
	o.Status = status
}

// WithUserID adds the userID to the leaves list params
func (o *LeavesListParams) WithUserID(userID *string) *LeavesListParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the leaves list params
func (o *LeavesListParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *LeavesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.DescriptionContains != nil {

		// query param description__contains
		var qrDescriptionContains string
		if o.DescriptionContains != nil {
			qrDescriptionContains = *o.DescriptionContains
		}
		qDescriptionContains := qrDescriptionContains
		if qDescriptionContains != "" {
			if err := r.SetQueryParam("description__contains", qDescriptionContains); err != nil {
				return err
			}
		}

	}

	if o.DescriptionIcontains != nil {

		// query param description__icontains
		var qrDescriptionIcontains string
		if o.DescriptionIcontains != nil {
			qrDescriptionIcontains = *o.DescriptionIcontains
		}
		qDescriptionIcontains := qrDescriptionIcontains
		if qDescriptionIcontains != "" {
			if err := r.SetQueryParam("description__icontains", qDescriptionIcontains); err != nil {
				return err
			}
		}

	}

	if o.LeavedateGte != nil {

		// query param leavedate__gte
		var qrLeavedateGte string
		if o.LeavedateGte != nil {
			qrLeavedateGte = *o.LeavedateGte
		}
		qLeavedateGte := qrLeavedateGte
		if qLeavedateGte != "" {
			if err := r.SetQueryParam("leavedate__gte", qLeavedateGte); err != nil {
				return err
			}
		}

	}

	if o.LeavedateRange != nil {

		// query param leavedate__range
		var qrLeavedateRange string
		if o.LeavedateRange != nil {
			qrLeavedateRange = *o.LeavedateRange
		}
		qLeavedateRange := qrLeavedateRange
		if qLeavedateRange != "" {
			if err := r.SetQueryParam("leavedate__range", qLeavedateRange); err != nil {
				return err
			}
		}

	}

	if o.LeavedateTimesheet != nil {

		// query param leavedate__timesheet
		var qrLeavedateTimesheet string
		if o.LeavedateTimesheet != nil {
			qrLeavedateTimesheet = *o.LeavedateTimesheet
		}
		qLeavedateTimesheet := qrLeavedateTimesheet
		if qLeavedateTimesheet != "" {
			if err := r.SetQueryParam("leavedate__timesheet", qLeavedateTimesheet); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
