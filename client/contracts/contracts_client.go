// Code generated by go-swagger; DO NOT EDIT.

package contracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contracts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contracts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ContractsConsultancyList APIs endpoint that allows consultancy contracts to be viewed or edited

API endpoint that allows consultancy contracts to be viewed or edited.
*/
func (a *Client) ContractsConsultancyList(params *ContractsConsultancyListParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsConsultancyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsConsultancyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_consultancy_list",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/consultancy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsConsultancyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsConsultancyListOK), nil

}

/*
ContractsConsultancyRead APIs endpoint that allows consultancy contracts to be viewed or edited

API endpoint that allows consultancy contracts to be viewed or edited.
*/
func (a *Client) ContractsConsultancyRead(params *ContractsConsultancyReadParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsConsultancyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsConsultancyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_consultancy_read",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/consultancy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsConsultancyReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsConsultancyReadOK), nil

}

/*
ContractsList APIs endpoint that allows contracts to be viewed or edited

API endpoint that allows contracts to be viewed or edited.
*/
func (a *Client) ContractsList(params *ContractsListParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_list",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsListOK), nil

}

/*
ContractsProjectList APIs endpoint that allows project contracts to be viewed or edited

API endpoint that allows project contracts to be viewed or edited.
*/
func (a *Client) ContractsProjectList(params *ContractsProjectListParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsProjectListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsProjectListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_project_list",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/project/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsProjectListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsProjectListOK), nil

}

/*
ContractsProjectRead APIs endpoint that allows project contracts to be viewed or edited

API endpoint that allows project contracts to be viewed or edited.
*/
func (a *Client) ContractsProjectRead(params *ContractsProjectReadParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsProjectReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsProjectReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_project_read",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/project/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsProjectReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsProjectReadOK), nil

}

/*
ContractsRead APIs endpoint that allows contracts to be viewed or edited

API endpoint that allows contracts to be viewed or edited.
*/
func (a *Client) ContractsRead(params *ContractsReadParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_read",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsReadOK), nil

}

/*
ContractsSupportList APIs endpoint that allows support contracts to be viewed or edited

API endpoint that allows support contracts to be viewed or edited.
*/
func (a *Client) ContractsSupportList(params *ContractsSupportListParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsSupportListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsSupportListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_support_list",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/support/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsSupportListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsSupportListOK), nil

}

/*
ContractsSupportRead APIs endpoint that allows support contracts to be viewed or edited

API endpoint that allows support contracts to be viewed or edited.
*/
func (a *Client) ContractsSupportRead(params *ContractsSupportReadParams, authInfo runtime.ClientAuthInfoWriter) (*ContractsSupportReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsSupportReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contracts_support_read",
		Method:             "GET",
		PathPattern:        "/api/v1/contracts/support/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsSupportReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractsSupportReadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
