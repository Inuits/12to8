// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGroupsListParams creates a new GroupsListParams object
// with the default values initialized.
func NewGroupsListParams() *GroupsListParams {
	var ()
	return &GroupsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGroupsListParamsWithTimeout creates a new GroupsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGroupsListParamsWithTimeout(timeout time.Duration) *GroupsListParams {
	var ()
	return &GroupsListParams{

		timeout: timeout,
	}
}

// NewGroupsListParamsWithContext creates a new GroupsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewGroupsListParamsWithContext(ctx context.Context) *GroupsListParams {
	var ()
	return &GroupsListParams{

		Context: ctx,
	}
}

// NewGroupsListParamsWithHTTPClient creates a new GroupsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGroupsListParamsWithHTTPClient(client *http.Client) *GroupsListParams {
	var ()
	return &GroupsListParams{
		HTTPClient: client,
	}
}

/*GroupsListParams contains all the parameters to send to the API endpoint
for the groups list operation typically these are written to a http.Request
*/
type GroupsListParams struct {

	/*Page*/
	Page *string
	/*PageSize*/
	PageSize *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the groups list params
func (o *GroupsListParams) WithTimeout(timeout time.Duration) *GroupsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the groups list params
func (o *GroupsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the groups list params
func (o *GroupsListParams) WithContext(ctx context.Context) *GroupsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the groups list params
func (o *GroupsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the groups list params
func (o *GroupsListParams) WithHTTPClient(client *http.Client) *GroupsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the groups list params
func (o *GroupsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the groups list params
func (o *GroupsListParams) WithPage(page *string) *GroupsListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the groups list params
func (o *GroupsListParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the groups list params
func (o *GroupsListParams) WithPageSize(pageSize *string) *GroupsListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the groups list params
func (o *GroupsListParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GroupsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
