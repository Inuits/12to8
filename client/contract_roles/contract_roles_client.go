// Code generated by go-swagger; DO NOT EDIT.

package contract_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contract roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contract roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ContractRolesList APIs endpoint that allows contract roles to be viewed or edited

API endpoint that allows contract roles to be viewed or edited.
*/
func (a *Client) ContractRolesList(params *ContractRolesListParams, authInfo runtime.ClientAuthInfoWriter) (*ContractRolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contract_roles_list",
		Method:             "GET",
		PathPattern:        "/api/v1/contract_roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractRolesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractRolesListOK), nil

}

/*
ContractRolesRead APIs endpoint that allows contract roles to be viewed or edited

API endpoint that allows contract roles to be viewed or edited.
*/
func (a *Client) ContractRolesRead(params *ContractRolesReadParams, authInfo runtime.ClientAuthInfoWriter) (*ContractRolesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractRolesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contract_roles_read",
		Method:             "GET",
		PathPattern:        "/api/v1/contract_roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractRolesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractRolesReadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
