// Code generated by go-swagger; DO NOT EDIT.

package my_timesheets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new my timesheets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for my timesheets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MyTimesheetsCreate APIs endpoint that allows timesheets for the currently authenticated user to be viewed or edited

API endpoint that allows timesheets for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyTimesheetsCreate(params *MyTimesheetsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*MyTimesheetsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyTimesheetsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_timesheets_create",
		Method:             "POST",
		PathPattern:        "/api/v1/my_timesheets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyTimesheetsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyTimesheetsCreateCreated), nil

}

/*
MyTimesheetsDelete APIs endpoint that allows timesheets for the currently authenticated user to be viewed or edited

API endpoint that allows timesheets for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyTimesheetsDelete(params *MyTimesheetsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*MyTimesheetsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyTimesheetsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_timesheets_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/my_timesheets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyTimesheetsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyTimesheetsDeleteNoContent), nil

}

/*
MyTimesheetsList APIs endpoint that allows timesheets for the currently authenticated user to be viewed or edited

API endpoint that allows timesheets for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyTimesheetsList(params *MyTimesheetsListParams, authInfo runtime.ClientAuthInfoWriter) (*MyTimesheetsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyTimesheetsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_timesheets_list",
		Method:             "GET",
		PathPattern:        "/api/v1/my_timesheets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyTimesheetsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyTimesheetsListOK), nil

}

/*
MyTimesheetsPartialUpdate APIs endpoint that allows timesheets for the currently authenticated user to be viewed or edited

API endpoint that allows timesheets for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyTimesheetsPartialUpdate(params *MyTimesheetsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyTimesheetsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyTimesheetsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_timesheets_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/my_timesheets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyTimesheetsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyTimesheetsPartialUpdateOK), nil

}

/*
MyTimesheetsRead APIs endpoint that allows timesheets for the currently authenticated user to be viewed or edited

API endpoint that allows timesheets for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyTimesheetsRead(params *MyTimesheetsReadParams, authInfo runtime.ClientAuthInfoWriter) (*MyTimesheetsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyTimesheetsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_timesheets_read",
		Method:             "GET",
		PathPattern:        "/api/v1/my_timesheets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyTimesheetsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyTimesheetsReadOK), nil

}

/*
MyTimesheetsUpdate APIs endpoint that allows timesheets for the currently authenticated user to be viewed or edited

API endpoint that allows timesheets for the currently authenticated user to be viewed or edited.
*/
func (a *Client) MyTimesheetsUpdate(params *MyTimesheetsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MyTimesheetsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMyTimesheetsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "my_timesheets_update",
		Method:             "PUT",
		PathPattern:        "/api/v1/my_timesheets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MyTimesheetsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MyTimesheetsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
